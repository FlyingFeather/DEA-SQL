SELECT COUNT(*) FROM singer;
SELECT COUNT(DISTINCT singer_id) FROM singer;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = "France";
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)
SELECT singer.song_name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT singer.country FROM singer WHERE singer.age > 20;
SELECT country, COUNT(*) as singer_count FROM singer GROUP BY country;
SELECT country, COUNT(*) FROM singer GROUP BY country;
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);
SELECT song_name FROM singer WHERE age > ( SELECT AVG(age) FROM singer );
SELECT stadium.location, stadium.name FROM stadium WHERE stadium.capacity BETWEEN 5000 AND 10000;
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity) AS maximum_capacity, AVG(capacity) AS average_capacity FROM stadium;
SELECT AVG(capacity) AS average_capacity, MAX(capacity) AS maximum_capacity FROM stadium;
SELECT name, capacity FROM stadium WHERE average = ( SELECT MAX(average) FROM stadium );
SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.average = (SELECT MAX(average) FROM stadium);
SELECT count(*) FROM concert WHERE year = 2014 OR year = 2015;
SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015;
SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;
SELECT stadium.name, COUNT(concert.concert_id) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;
SELECT stadium.name, stadium.capacity FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(concert.concert_id) DESC LIMIT 1;
SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.stadium_id IN ( SELECT concert.stadium_id FROM concert WHERE concert.year > 2013 GROUP BY concert.stadium_id HAVING COUNT(*) = ( SELECT MAX(concert_count) FROM ( SELECT COUNT(*) AS concert_count FROM concert WHERE year > 2013 GROUP BY stadium_id ) ) );
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL;
SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN ( SELECT concert.stadium_id FROM concert )
SELECT DISTINCT country FROM singer WHERE age > 40 INTERSECT SELECT DISTINCT country FROM singer WHERE age < 30;
SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert WHERE year = 2014 );
SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN ( SELECT concert.stadium_id FROM concert WHERE concert.year = 2014 );
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) as number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;
SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer_in_concert.singer_id = singer.singer_id GROUP BY singer.singer_id;
SELECT singer.name, COUNT(singer_in_concert.concert_id) AS concert_count FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;
SELECT singer.name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014;
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014;
SELECT singer.name, singer.country FROM singer WHERE song_name LIKE '%Hey%';
SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%';
SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2015;
SELECT name, location FROM stadium WHERE stadium_id IN ( SELECT stadium_id FROM concert WHERE year = 2014 ) INTERSECT SELECT name, location FROM stadium WHERE stadium_id IN ( SELECT stadium_id FROM concert WHERE year = 2015 );
SELECT COUNT(concert.concert_id) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = ( SELECT MAX(capacity) FROM stadium );
SELECT count(*) FROM concert WHERE stadium_id IN (SELECT stadium_id FROM stadium WHERE capacity = (SELECT MAX(capacity) FROM stadium));
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT pets.weight FROM pets WHERE pettype = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT MIN(weight) FROM pets WHERE pettype = 'dog' ORDER BY pet_age LIMIT 1;
SELECT pets.pettype, MAX(pets.weight) FROM pets GROUP BY pets.pettype;
SELECT pets.pettype, MAX(pets.weight) FROM pets GROUP BY pets.pettype;
SELECT COUNT(pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;
SELECT COUNT(*) FROM has_pet INNER JOIN student ON has_pet.stuid = student.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;
SELECT COUNT(DISTINCT pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F' AND pets.pettype = 'dog';
SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog';
SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND student.stuid IN ( SELECT student.stuid FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' );
SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND student.stuid IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' )
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = "cat");
SELECT student.major, student.age FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' );
SELECT student.stuid FROM student WHERE student.stuid NOT IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "cat" );
SELECT student.stuid FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' );
SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' );
SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' EXCEPT SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat';
SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT pets.pettype, pets.weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT pettype, AVG(pet_age) as average_age, MAX(pet_age) as maximum_age FROM pets GROUP BY pettype;
SELECT pettype, AVG(pet_age) as average_age, MAX(pet_age) as maximum_age FROM pets GROUP BY pettype;
SELECT pettype, AVG(weight) as average_weight FROM pets GROUP BY pettype;
SELECT pettype, AVG(weight) as average_weight FROM pets GROUP BY pettype;
SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid;
SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid;
SELECT pets.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith';
SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE lname = 'Smith';
SELECT student.stuid, COUNT(pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid;
SELECT student.stuid, COUNT(pets.petid) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid
SELECT student.fname, student.sex FROM student WHERE stuid IN ( SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(petid) > 1 );
SELECT student.fname, student.sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.fname, student.sex HAVING COUNT(has_pet.petid) > 1;
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3;
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3;
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT count(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT car_makers.fullname, car_makers.id, COUNT(DISTINCT model_list.model) as num_models FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname, car_makers.id;
SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;
SELECT car_names.model FROM car_names JOIN model_list ON car_names.model = model_list.modelid JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY horsepower ASC LIMIT 1;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.horsepower ASC LIMIT 1;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT car_makers.fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = 1970;
SELECT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970 GROUP BY car_makers.fullname;
SELECT car_makers.maker, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.year = ( SELECT MIN(year) FROM cars_data )
SELECT car_makers.maker, MIN(cars_data.year) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.maker ORDER BY MIN(cars_data.year) LIMIT 1;
SELECT DISTINCT car_names.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980
SELECT continents.continent, COUNT(DISTINCT car_makers.id) AS count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent;
SELECT continents.continent, COUNT(car_makers.maker) FROM continents INNER JOIN countries ON continents.contid = countries.continent INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent;
SELECT countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname ORDER BY COUNT(car_makers.maker) DESC LIMIT 1;
SELECT countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname ORDER BY COUNT(DISTINCT car_makers.id) DESC LIMIT 1;
SELECT car_makers.fullname, COUNT(model_list.modelid) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname;
SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) as num_car_models FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.fullname;
SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.make = 'amc hornet sportabout (sw)';
SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.model = "amc hornet sportabout (sw)";
SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france';
SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france';
SELECT COUNT(DISTINCT modelid) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id WHERE countries.countryname = "usa";
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States';
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;
SELECT model_list.maker, car_names.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model
SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;
SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT year, AVG(weight) FROM cars_data GROUP BY year;
SELECT year, AVG(weight), AVG(year) FROM cars_data GROUP BY year;
SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.countryid = car_makers.country WHERE continents.continent = "europe" GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.id) >= 3;
SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 AND continents.continent = "europe";
SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3;
SELECT MAX(cars_data.horsepower) AS max_horsepower, car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.mpg DESC LIMIT 1;
SELECT model_list.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model ORDER BY mpg DESC LIMIT 1;
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE model_list.model = 'volvo';
SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'volvo';
SELECT cylinders, max(accelerate) FROM cars_data GROUP BY cylinders;
SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders;
SELECT model_list.model FROM model_list JOIN car_names ON model_list.modelid = car_names.model GROUP BY model_list.model ORDER BY COUNT(DISTINCT car_names.make) DESC LIMIT 1;
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(DISTINCT modelid) DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = "American Motor Company");
SELECT COUNT(*) FROM model_list JOIN car_makers ON car_makers.id = model_list.maker WHERE car_makers.fullname = "American Motor Company"
SELECT car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id HAVING COUNT(model_list.modelid) > 3;
SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id HAVING COUNT(model_list.modelid) > 3;
SELECT DISTINCT model_list.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.model INNER JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "General Motors" OR cars_data.weight > 3500;
SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.fullname = "General Motors" OR cars_data.weight > 3500;
SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;
SELECT year FROM cars_data WHERE weight < 4000 INTERSECT SELECT year FROM cars_data WHERE weight > 3000;
SELECT cars_data.horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);
SELECT MAX(horsepower) FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);
SELECT cars_data.cylinders FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = 'Volvo' ORDER BY cars_data.accelerate ASC LIMIT 1;
SELECT cars_data.cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.modelid = (SELECT modelid FROM model_list WHERE model = 'volvo') AND cars_data.accelerate = (SELECT MIN(accelerate) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.model = 'volvo');
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);
SELECT COUNT(DISTINCT countries.countryname) FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) > 2;
SELECT COUNT(DISTINCT countries.countryid) FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) > 2;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT count(*) FROM cars_data WHERE cylinders > 6;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1;
SELECT car_names.makeid, car_makers.maker FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3;
SELECT car_names.makeid, car_names.make FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders < 4 AND cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT model_list.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.fullname != "Ford Motor Company";
SELECT car_names.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND maker != (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company');
SELECT countries.countryname FROM countries WHERE NOT EXISTS ( SELECT 1 FROM car_makers WHERE countries.countryid = car_makers.country )
SELECT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.maker IS NULL;
SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.modelid) >= 2 AND COUNT(DISTINCT model_list.maker) > 3;
SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_names.makeid) > 3;
SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN ( SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 3 ) OR countries.countryid IN ( SELECT car_makers.country FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker WHERE model_list.model = 'fiat' ) ;
SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN ( SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(car_makers.id) > 3 ) OR countries.countryid IN ( SELECT car_makers.country FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' ) ;
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline = "JetBlue Airways";
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT COUNT(DISTINCT airline) FROM airlines
SELECT COUNT(DISTINCT airline) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT COUNT(DISTINCT airline) FROM airlines WHERE country = 'USA';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT airports.city, airports.country FROM airports WHERE airports.airportname = "Alton";
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights WHERE destairport = "ATO";
SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Ashley' AND flights.sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = "Aberdeen") AND destairport = (SELECT airportcode FROM airports WHERE city = "Ashley");
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';
SELECT count(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'ASY';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT count(*) FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = "United Airlines" AND airports.city = "Aberdeen";
SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen';
SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.airportcode FROM airports INNER JOIN flights ON airports.airportcode = flights.destairport GROUP BY airports.airportcode ORDER BY COUNT(flights.flightno) DESC LIMIT 1;
SELECT flights.destairport FROM flights GROUP BY flights.destairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.airportcode FROM airports LEFT JOIN flights ON flights.destairport = airports.airportcode GROUP BY airports.airportcode ORDER BY COUNT(flights.flightno) ASC LIMIT 1;
SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY airports.airportcode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1;
SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(flightno) LIMIT 1)
SELECT abbreviation, country FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(total_flights) FROM (SELECT COUNT(*) AS total_flights FROM flights GROUP BY airline))) LIMIT 1;
SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD';
SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';
SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD';
SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD';
SELECT airline FROM airlines WHERE uid IN ( SELECT airline FROM flights WHERE sourceairport IN ('APG', 'CVO') ) AND uid IN ( SELECT airline FROM flights WHERE destairport IN ('APG', 'CVO') );
SELECT airlines.airline FROM airlines WHERE EXISTS ( SELECT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG' AND flights.airline = airlines.airline ) AND EXISTS ( SELECT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'CVO' AND flights.airline = airlines.airline );
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'CVO' AND airlines.airline NOT IN ( SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'APG' );
SELECT airlines.airline, airlines.abbreviation FROM airlines LEFT JOIN flights ON flights.airline = airlines.airline LEFT JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'CVO' AND airlines.airline NOT IN ( SELECT airlines.airline FROM airlines LEFT JOIN flights ON flights.airline = airlines.airline LEFT JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'APG' );
SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10 )
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;
SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200 );
SELECT airlines.airline FROM flights INNER JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline HAVING COUNT(*) < 200;
SELECT flightno FROM flights WHERE airline = "United Airlines";
SELECT flightno FROM flights WHERE airline = 'United Airlines';
SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = "APG";
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE destairport = "APG";
SELECT flightno FROM flights WHERE destairport = "APG";
SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen";
SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = "Aberdeen";
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights WHERE destairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' OR city = 'Abilene' );
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights) AND airportcode NOT IN (SELECT sourceairport FROM flights);
SELECT airportname FROM airports WHERE airportcode NOT IN ( SELECT DISTINCT sourceairport FROM flights UNION SELECT DISTINCT destairport FROM flights );
SELECT COUNT(*) FROM employee;
SELECT Count(*) FROM employee;
SELECT name FROM employee ORDER BY age ASC;
SELECT name FROM employee ORDER BY age ASC;
SELECT city, COUNT(*) as num_employees FROM employee GROUP BY city;
SELECT city, COUNT(employee_id) FROM employee GROUP BY city;
SELECT employee.city FROM employee WHERE employee.age < 30 GROUP BY employee.city HAVING COUNT(DISTINCT employee.employee_id) > 1;
SELECT employee.city FROM employee WHERE employee.age < 30 GROUP BY employee.city HAVING COUNT(*) > 1;
SELECT location, COUNT(shop_id) AS num_shops FROM shop GROUP BY location;
SELECT location, COUNT(shop_id) AS num_shops FROM shop GROUP BY location;
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop);
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop);
SELECT MIN(number_products), MAX(number_products) FROM shop;
SELECT MIN(number_products), MAX(number_products) FROM shop;
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;
SELECT shop.name FROM shop WHERE shop.number_products > ( SELECT AVG(number_products) FROM shop );
SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop)
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.name ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1;
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE bonus = (SELECT MAX(bonus) FROM evaluation);
SELECT employee.name FROM evaluation INNER JOIN employee ON evaluation.employee_id = employee.employee_id ORDER BY evaluation.bonus DESC LIMIT 1;
SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)
SELECT employee.name FROM employee LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.employee_id IS NULL;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;
SELECT shop.name FROM shop WHERE shop.shop_id NOT IN (SELECT shop_id FROM hiring)
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT shop.name, COUNT(hiring.employee_id) AS num_employees_hired FROM shop JOIN hiring ON hiring.shop_id = shop.shop_id GROUP BY shop.name;
SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name;
SELECT SUM(bonus) AS total_bonus FROM evaluation;
SELECT SUM(bonus) FROM evaluation;
SELECT shop_id, employee_id, start_from, is_full_time FROM hiring;
SELECT hiring.* FROM hiring;
SELECT DISTINCT district FROM shop WHERE number_products < 3000 INTERSECT SELECT DISTINCT district FROM shop WHERE number_products > 10000;
SELECT shop.district FROM shop WHERE number_products < 3000 INTERSECT SELECT shop.district FROM shop WHERE number_products > 10000;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(*) FROM documents;
SELECT COUNT(*) FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT documents.document_id, documents.document_name, documents.document_description FROM documents;
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%';
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%'
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = "Robbin CV";
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV';
SELECT COUNT(DISTINCT template_id) AS num_templates FROM documents
SELECT COUNT(DISTINCT templates.template_id) AS number_of_templates_used FROM templates JOIN documents ON templates.template_id = documents.template_id;
SELECT COUNT(DISTINCT documents.document_id) FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'PPT';
SELECT COUNT(*) AS num_documents FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'PPT';
SELECT templates.template_id, COUNT(documents.document_id) as num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;
SELECT templates.template_id, COUNT(documents.document_id) FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;
SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;
SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;
SELECT templates.template_id FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id HAVING COUNT(DISTINCT documents.document_id) > 1;
SELECT templates.template_id FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id HAVING COUNT(DISTINCT documents.document_id) > 1;
SELECT templates.template_id FROM templates WHERE templates.template_id NOT IN ( SELECT documents.template_id FROM documents );
SELECT templates.template_id FROM templates WHERE templates.template_id NOT IN (SELECT template_id FROM documents)
SELECT COUNT(*) FROM templates;
SELECT COUNT(*) FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT DISTINCT template_type_code FROM templates;
SELECT ref_template_types.template_type_code FROM ref_template_types;
SELECT templates.template_id FROM templates WHERE templates.template_type_code IN ('PP', 'PPT');
SELECT templates.template_id FROM templates WHERE templates.template_type_code IN ('PP', 'PPT');
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;
SELECT ref_template_types.template_type_code, COUNT(templates.template_id) as number_of_templates FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;
SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS template_count FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;
SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_code NOT IN ( SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code HAVING COUNT(templates.template_id) >= 3 )
SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_code IN ( SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3 );
SELECT templates.version_number, templates.template_type_code FROM templates ORDER BY templates.version_number ASC LIMIT 1;
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number = (SELECT MIN(version_number) FROM templates);
SELECT ref_template_types.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE documents.document_name = "Data base";
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base';
SELECT documents.document_name FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON templates.template_id = documents.template_id WHERE ref_template_types.template_type_code = 'BK';
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'BK';
SELECT ref_template_types.template_type_code, COUNT(documents.document_id) FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code;
SELECT ref_template_types.template_type_code, COUNT(documents.template_id) AS num_documents FROM ref_template_types INNER JOIN templates ON templates.template_type_code = ref_template_types.template_type_code INNER JOIN documents ON documents.template_id = templates.template_id GROUP BY ref_template_types.template_type_code;
SELECT templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;
SELECT ref_template_types.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_id IS NULL;
SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_type_code IS NULL;
SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types
SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types;
SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = "AD";
SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = 'AD';
SELECT ref_template_types.template_type_code FROM ref_template_types WHERE template_type_description = "Book";
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';
SELECT DISTINCT ref_template_types.template_type_description FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code INNER JOIN documents ON templates.template_id = documents.template_id
SELECT DISTINCT ref_template_types.template_type_description FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON templates.template_id = documents.template_id;
SELECT templates.template_id FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = "Presentation";
SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation';
SELECT COUNT(*) FROM paragraphs;
SELECT COUNT(*) FROM paragraphs;
SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');
SELECT count(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');
SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea';
SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text LIKE '%Korea%';
SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Welcome to NY';
SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Welcome to NY';
SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = "Customer reviews";
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) as paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) as num_paragraphs FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT documents.document_id FROM documents WHERE document_id IN ( SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 1 AND COUNT(*) <= 2 );
SELECT documents.document_id FROM documents WHERE document_id IN ( SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2 );
SELECT documents.document_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');
SELECT documents.document_id FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT name FROM teacher ORDER BY age ASC;
SELECT teacher.name FROM teacher ORDER BY teacher.age ASC;
SELECT age, hometown FROM teacher;
SELECT teacher.age, teacher.hometown FROM teacher;
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT teacher.name FROM teacher WHERE teacher.age IN (32, 33);
SELECT name FROM teacher WHERE age IN (32, 33);
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;
SELECT DISTINCT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown;
SELECT teacher.hometown, COUNT(teacher.teacher_id) AS total_teachers FROM teacher GROUP BY teacher.hometown;
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT(DISTINCT teacher.teacher_id) > 1;
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT(DISTINCT teacher.teacher_id) >= 2;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = "Math";
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = "Math";
SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name, count(course_arrange.course_id) FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT name FROM teacher WHERE teacher_id IN ( SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2 )
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2;
SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.teacher_id IS NULL;
SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT COUNT(*) FROM visitor WHERE age < 30;
SELECT visitor.name FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.level_of_membership DESC;
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;
SELECT visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC;
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;
SELECT museum.open_year, museum.num_of_staff FROM museum WHERE museum.name = "Plaza Museum";
SELECT museum.name FROM museum WHERE museum.num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE museum.open_year > 2010)
SELECT visitor.id, visitor.name, visitor.age FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.age HAVING COUNT(visit.museum_id) > 1;
SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;
SELECT museum.museum_id, museum.name FROM museum INNER JOIN visit ON museum.museum_id = visit.museum_id GROUP BY museum.museum_id, museum.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT m.name FROM museum m LEFT JOIN visit v ON m.museum_id = v.museum_id WHERE v.visitor_id IS NULL;
SELECT visitor.name, visitor.age FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket = ( SELECT MAX(num_of_ticket) FROM visit );
SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;
SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1;
SELECT visitor.name FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id INNER JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year < 2009 INTERSECT SELECT visitor.name FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id INNER JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2011;
SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE museum_id NOT IN ( SELECT museum_id FROM museum WHERE open_year > 2010 );
SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = "USA";
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches
SELECT AVG(rankings.ranking) AS average_rank FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id;
SELECT AVG(winner_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT MAX(loser_rank) as best_rank FROM matches
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) AS distinct_losers FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT players.first_name, players.last_name FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 INTERSECT SELECT players.first_name, players.last_name FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE year = 2016;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 INTERSECT SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2016;
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' INTERSECT SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open';
SELECT players.first_name, players.country_code FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' INTERSECT SELECT players.first_name, players.country_code FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open';
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MIN(birth_date) FROM players);
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT players.first_name || ' ' || players.last_name AS full_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name || ' ' || players.last_name FROM players WHERE players.hand = 'left' ORDER BY players.birth_date;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1;
SELECT players.first_name, players.country_code FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT matches.winner_name, SUM(matches.winner_rank_points) AS total_rank_points FROM matches GROUP BY matches.winner_name ORDER BY COUNT(matches.match_num) DESC LIMIT 1;
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = "Australian Open" ORDER BY winner_rank_points DESC LIMIT 1;
SELECT matches.winner_name FROM matches WHERE tourney_name = "Australian Open" ORDER BY winner_rank_points DESC LIMIT 1;
SELECT matches.winner_name, matches.loser_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)
SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT players.first_name, AVG(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50;
SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50;
SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
SELECT year, COUNT(match_num) as num_matches FROM matches GROUP BY year;
SELECT players.first_name, players.last_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT matches.winner_name, matches.winner_rank FROM matches ORDER BY matches.winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L';
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT players.first_name, players.country_code, players.birth_date FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches )
SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1;
SELECT hand, COUNT(player_id) AS num_players FROM players GROUP BY hand;
SELECT players.hand, COUNT(*) as player_count FROM players GROUP BY players.hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(death.injured) AS maximum_death_toll, MIN(death.injured) AS minimum_death_toll FROM death
SELECT AVG(injured) FROM death;
SELECT death.note, death.killed FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != 'Boril';
SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id INNER JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT battle.id) FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.tonnage <> '225' OR ship.tonnage IS NULL;
SELECT battle.name, battle.date FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta');
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.lost_in_battle IS NULL AND ship.location = 'English Channel';
SELECT death.note FROM death WHERE death.note LIKE '%East%'
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT COUNT(*) FROM courses;
SELECT COUNT(*) FROM courses;
SELECT course_description FROM courses WHERE course_name = 'math';
SELECT course_description FROM courses WHERE course_name = 'math';
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea";
SELECT departments.department_id, departments.department_name FROM departments INNER JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;
SELECT department_name, department_id FROM departments WHERE department_id IN ( SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY count(*) DESC LIMIT 1 );
SELECT COUNT(DISTINCT department_id) FROM degree_programs;
SELECT COUNT(DISTINCT department_id) FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;
SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT section_name, section_description FROM sections;
SELECT section_name, section_description FROM sections;
SELECT courses.course_name, courses.course_id FROM courses WHERE courses.course_id IN ( SELECT sections.course_id FROM sections GROUP BY sections.course_id HAVING COUNT(sections.section_id) <= 2 );
SELECT course_name, course_id FROM courses WHERE course_id IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2 );
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT semesters.semester_id, semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT departments.department_description FROM departments WHERE departments.department_name LIKE '%the computer%';
SELECT departments.department_description FROM departments WHERE departments.department_name LIKE '%computer%';
SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(DISTINCT student_enrolment.semester_id) = 1;
SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(DISTINCT student_enrolment.semester_id) = 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor';
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelors';
SELECT degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_programs.degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1 )
SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) as num_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(student_enrolment.student_enrolment_id) AS num_enrollments FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT semesters.semester_name FROM semesters WHERE semesters.semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment)
SELECT semesters.semester_name FROM semesters WHERE semesters.semester_id NOT IN ( SELECT semester_id FROM student_enrolment )
SELECT DISTINCT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id
SELECT course_name FROM courses WHERE course_id IN ( SELECT DISTINCT course_id FROM student_enrolment_courses )
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY courses.course_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_name ORDER BY COUNT(DISTINCT student_enrolment_courses.student_course_id) DESC LIMIT 1;
SELECT students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment)
SELECT students.last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id LEFT JOIN student_enrolment ON student_enrolment.student_id = students.student_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.degree_program_id IS NULL;
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts INNER JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id GROUP BY transcripts.transcript_id HAVING COUNT(student_enrolment_courses.course_id) >= 2;
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts INNER JOIN student_enrolment_courses ON transcripts.transcript_id = student_enrolment_courses.student_enrolment_id GROUP BY transcripts.transcript_id HAVING COUNT(student_enrolment_courses.course_id) >= 2;
SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';
SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment.student_id = transcripts.transcript_id ORDER BY students.date_first_registered ASC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.transcript_id ORDER BY transcripts.transcript_date ASC LIMIT 1;
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id JOIN addresses AS current_addresses ON students.current_address_id = current_addresses.address_id WHERE addresses.line_1 <> current_addresses.line_1;
SELECT students.first_name FROM students JOIN addresses AS perm_addr ON students.permanent_address_id = perm_addr.address_id JOIN addresses AS curr_addr ON students.current_address_id = curr_addr.address_id WHERE perm_addr.line_1 <> curr_addr.line_1;
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses INNER JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) FROM transcripts;
SELECT AVG(transcript_date) FROM transcripts;
SELECT transcripts.transcript_date, transcripts.other_details FROM transcripts ORDER BY transcripts.transcript_date LIMIT 1;
SELECT MIN(transcript_date), other_details FROM transcripts;
SELECT COUNT(*) FROM transcripts;
SELECT count(*) FROM transcripts;
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT student_enrolment_courses.student_enrolment_id, COUNT(*) AS count FROM student_enrolment_courses JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id GROUP BY student_enrolment_courses.student_enrolment_id ORDER BY count DESC LIMIT 1;
SELECT courses.course_id, student_enrolment_courses.student_enrolment_id FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN transcript_contents ON student_enrolment_courses.student_course_id = transcript_contents.student_course_id GROUP BY courses.course_id ORDER BY COUNT(DISTINCT transcript_contents.transcript_id) DESC LIMIT 1;
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY transcripts.transcript_date, transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT semesters.semester_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE degree_programs.degree_summary_name = 'Master' INTERSECT SELECT semesters.semester_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE degree_programs.degree_summary_name = 'Bachelor';
SELECT semesters.semester_id FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name IN ('Masters', 'Bachelors') GROUP BY semesters.semester_id HAVING COUNT(DISTINCT degree_summary_name) = 2;
SELECT COUNT(DISTINCT students.current_address_id) FROM students;
SELECT DISTINCT addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses INNER JOIN students ON students.permanent_address_id = addresses.address_id OR students.current_address_id = addresses.address_id
SELECT students.first_name, students.last_name, students.middle_name, students.student_id, students.email_address, addresses.line_1, addresses.line_2, addresses.line_3, addresses.city FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id ORDER BY students.last_name DESC;
SELECT students.other_student_details FROM students ORDER BY students.last_name DESC;
SELECT section_name, section_description FROM sections WHERE section_name = 'h';
SELECT sections.section_description FROM sections WHERE sections.section_name = 'h';
SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582';
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582';
SELECT title FROM cartoon ORDER BY title ASC;
SELECT cartoon.title FROM cartoon ORDER BY cartoon.title ASC;
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = "Ben Jones";
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = "Ben Jones";
SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr";
SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr";
SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date;
SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date;
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti';
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti';
SELECT country, COUNT(*) as num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT country, COUNT(id) as num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT count(DISTINCT series_name), count(DISTINCT content) FROM tv_channel;
SELECT content FROM tv_channel WHERE series_name = "Sky Radio";
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.series_name = 'Sky Radio';
SELECT COUNT(*) FROM tv_channel WHERE language = 'English';
SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English';
SELECT language, COUNT(*) as num_channels FROM tv_channel GROUP BY language ORDER BY num_channels LIMIT 1;
SELECT language, COUNT(DISTINCT tv_channel.id) FROM tv_channel GROUP BY language ORDER BY COUNT(DISTINCT tv_channel.id) LIMIT 1;
SELECT tv_channel.language, Count(tv_channel.id) FROM tv_channel GROUP BY tv_channel.language;
SELECT language, COUNT(DISTINCT id) FROM tv_channel GROUP BY language;
SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = 'The Rise of the Blue Beetle!';
SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = 'The Rise of the Blue Beetle!';
SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio";
SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio";
SELECT tv_series.episode FROM tv_series ORDER BY tv_series.rating;
SELECT episode FROM tv_series ORDER BY rating;
SELECT tv_series.episode, tv_series.rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT MIN(share), MAX(share) FROM tv_series;
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM tv_series;
SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode = "A Love of a Lifetime";
SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode = 'A Love of a Lifetime';
SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.episode = "A Love of a Lifetime";
SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';
SELECT tv_channel.series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_series.episode = "A Love of a Lifetime";
SELECT tv_channel.series_name FROM tv_channel INNER JOIN tv_series ON tv_series.channel = tv_channel.id WHERE tv_series.episode = "A Love of a Lifetime";
SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio");
SELECT episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio";
SELECT cartoon.directed_by, COUNT(cartoon.id) FROM cartoon GROUP BY cartoon.directed_by;
SELECT cartoon.directed_by, COUNT(cartoon.id) AS cartoon_count FROM cartoon GROUP BY cartoon.directed_by;
SELECT cartoon.production_code, cartoon.channel FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id WHERE tv_series.air_date = (SELECT MAX(air_date) FROM tv_series)
SELECT cartoon.production_code, cartoon.channel FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.id DESC LIMIT 1;
SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1;
SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1;
SELECT DISTINCT tv_channel.country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = "Todd Casey";
SELECT DISTINCT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey';
SELECT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.written_by = 'Todd Casey' )
SELECT country FROM tv_channel WHERE id NOT IN (SELECT DISTINCT channel FROM cartoon WHERE written_by = 'Todd Casey');
SELECT tv_channel.series_name, tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = "Ben Jones" AND cartoon.directed_by = "Michael Chang";
SELECT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang');
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language <> 'English';
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language <> 'English';
SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2 );
SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.id HAVING COUNT(tv_channel.id) > 2;
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = "Ben Jones" );
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN (SELECT cartoon.channel FROM cartoon WHERE directed_by = "Ben Jones")
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' );
SELECT package_option FROM tv_channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' );
SELECT COUNT(*) FROM poker_player
SELECT COUNT(*) FROM poker_player;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT poker_player.earnings FROM poker_player ORDER BY poker_player.earnings DESC;
SELECT final_table_made, best_finish FROM poker_player;
SELECT final_table_made, best_finish FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;
SELECT money_rank FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player);
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000;
SELECT people.name FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC;
SELECT people.birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings LIMIT 1;
SELECT people.birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings = (SELECT MIN(earnings) FROM poker_player)
SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.height DESC LIMIT 1;
SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.height DESC LIMIT 1;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT people.name FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC
SELECT p.name FROM poker_player AS pp JOIN people AS p ON p.people_id = pp.people_id ORDER BY pp.earnings DESC;
SELECT people.nationality, COUNT(people.nationality) AS count FROM people GROUP BY people.nationality;
SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT name, birth_date FROM people ORDER BY name ASC;
SELECT people.name, people.birth_date FROM people ORDER BY people.name ASC;
SELECT name FROM people WHERE nationality <> "Russia";
SELECT name FROM people WHERE nationality != 'Russia';
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);
SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL;
SELECT COUNT(DISTINCT nationality) AS distinct_nationalities FROM people;
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT count(DISTINCT state) FROM area_code_state;
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT MAX(area_code), MIN(area_code) FROM area_code_state;
SELECT MAX(created) FROM votes WHERE state = 'CA';
SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway';
SELECT DISTINCT state, created FROM votes
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN ( SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2 )
SELECT contestants.contestant_number, contestants.contestant_name FROM votes JOIN contestants on votes.contestant_number = contestants.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');
SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN ( SELECT DISTINCT contestant_number FROM votes );
SELECT area_code_state.area_code FROM votes JOIN area_code_state ON votes.state = area_code_state.state GROUP BY area_code_state.area_code ORDER BY COUNT(DISTINCT votes.phone_number) DESC LIMIT 1;
SELECT votes.created, votes.state, votes.phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling';
SELECT area_code FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name = 'Tabatha Gehling' OR contestants.contestant_name = 'Kelly Clauss' GROUP BY area_code HAVING COUNT(DISTINCT contestants.contestant_number) = 2;
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';
SELECT name FROM country WHERE indepyear > 1950;
SELECT country.name FROM country WHERE country.indepyear > 1950;
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';
SELECT count(*) FROM country WHERE governmentform = 'Republic';
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';
SELECT SUM(surfacearea) FROM country WHERE continent = 'Carribean';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT region FROM country JOIN city ON city.countrycode = country.code WHERE city.name = 'Kabul';
SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode = 'Aruba' AND isofficial = 'T' LIMIT 1;
SELECT population, lifeexpectancy FROM country WHERE name = "Brazil";
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT country.name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1;
SELECT country.name FROM country WHERE country.continent = 'Asia' ORDER BY country.lifeexpectancy ASC LIMIT 1;
SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia';
SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS largest_gnp FROM country WHERE country.continent = 'Asia';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');
SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe';
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US Territory';
SELECT AVG(country.gnp), SUM(city.population) FROM country JOIN city ON country.code = city.countrycode WHERE country.region = 'US Territory';
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba');
SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = "Afghanistan") AND isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT country.name FROM country JOIN ( SELECT countrycode, COUNT(DISTINCT language) AS num_languages FROM countrylanguage GROUP BY countrycode ORDER BY num_languages DESC LIMIT 1 ) AS lang_count ON country.code = lang_count.countrycode;
SELECT continent, COUNT(DISTINCT language) AS language_count FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY language_count DESC LIMIT 1;
SELECT continent, COUNT(DISTINCT language) AS num_languages FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY num_languages DESC LIMIT 1;
SELECT COUNT(*) FROM countrylanguage cl WHERE language IN ('English', 'Dutch') GROUP BY cl.countrycode HAVING COUNT(DISTINCT language) = 2;
SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch');
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" INTERSECT SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "French";
SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French';
SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 1 INTERSECT SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French' AND countrylanguage.isofficial = 1;
SELECT country.name FROM country WHERE country.code IN ( SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'French') AND isofficial = 'T' GROUP BY countrycode HAVING COUNT(*) = 2 );
SELECT COUNT(DISTINCT country.continent) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese';
SELECT count(DISTINCT country.continent) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'Chinese';
SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'))
SELECT country.region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('Dutch', 'English')
SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 1 AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch');
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 1 AND countrylanguage.language IN ('English', 'Dutch')
SELECT language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = "Asia" ORDER BY percentage DESC LIMIT 1;
SELECT countrylanguage.language FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' GROUP BY countrylanguage.language ORDER BY COUNT(DISTINCT country.code) DESC LIMIT 1;
SELECT language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE governmentform = 'Republic' GROUP BY language HAVING COUNT(DISTINCT country.code) = 1;
SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1;
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = "English" ORDER BY city.population DESC LIMIT 1;
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.population DESC LIMIT 1;
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' );
SELECT SUM(country.population) FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English");
SELECT SUM(country.population) AS total_population FROM country WHERE country.code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' );
SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 'T';
SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 1;
SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930) AND isofficial = 'T';
SELECT country.name FROM country WHERE country.surfacearea > ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' );
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT country.name FROM country WHERE country.continent = 'Africa' AND country.population < ( SELECT MIN(population) FROM country WHERE continent = 'Asia' );
SELECT country.name FROM country WHERE country.continent = 'Africa' AND country.population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');
SELECT country.name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT name FROM country WHERE continent = 'Asia' AND population > ( SELECT MAX(population) FROM country WHERE continent = 'Africa' );
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE language = "English");
SELECT country.code FROM country WHERE country.code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = "English" ) ; 
SELECT country.code FROM country WHERE country.code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' );
SELECT country.code FROM country WHERE country.code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language != "English" );
SELECT country.code FROM country WHERE country.code NOT IN (SELECT DISTINCT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = "English") AND country.governmentform <> "Republic";
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = "English") AND country.governmentform != "Republic";
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe" AND countrylanguage.language <> "English" AND countrylanguage.isofficial = 0;
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 0;
SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T' GROUP BY city.name;
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1;
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country);
SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = (SELECT MIN(population) FROM country);
SELECT country.population, country.name, country.headofstate FROM country WHERE country.surfacearea = (SELECT MAX(surfacearea) FROM country);
SELECT country.name, country.population, country.headofstate FROM country WHERE country.surfacearea = (SELECT MAX(surfacearea) FROM country);
SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3;
SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) > 2;
SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT district, COUNT(*) as num_cities FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT governmentform, sum(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;
SELECT governmentform, SUM(population) as total_population FROM country WHERE governmentform IN ( SELECT governmentform FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform ) GROUP BY governmentform;
SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country GROUP BY continent HAVING avg_life_expectancy < 72;
SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country GROUP BY continent HAVING average_life_expectancy < 72;
SELECT country.name, country.surfacearea FROM country ORDER BY country.surfacearea DESC LIMIT 5;
SELECT country.name, country.surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY population LIMIT 3;
SELECT name FROM country ORDER BY population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT SUM(country.population), AVG(country.surfacearea) FROM country WHERE country.continent = 'North America' AND country.surfacearea > 3000;
SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT city.name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT countrylanguage.language FROM countrylanguage GROUP BY countrylanguage.language ORDER BY COUNT(DISTINCT countrylanguage.countrycode) DESC LIMIT 1;
SELECT country.name, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = ( SELECT MAX(percentage) FROM countrylanguage WHERE country.code = countrylanguage.countrycode )
SELECT country.code, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING countrylanguage.percentage = MAX(countrylanguage.percentage);
SELECT COUNT(DISTINCT country.code) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE language = 'Spanish' GROUP BY language HAVING percentage = MAX(percentage);
SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50;
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1
SELECT country.code FROM countrylanguage INNER JOIN country ON country.code = countrylanguage.countrycode WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50;
SELECT COUNT(DISTINCT conductor_id) FROM conductor;
SELECT COUNT(conductor_id) FROM conductor;
SELECT conductor.name FROM conductor ORDER BY conductor.age ASC;
SELECT conductor.name FROM conductor ORDER BY conductor.age;
SELECT name FROM conductor WHERE nationality != "USA";
SELECT conductor.name FROM conductor WHERE conductor.nationality != 'USA';
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT AVG(attendance) FROM show;
SELECT AVG(attendance) FROM show;
SELECT MAX(share), MIN(share) FROM performance WHERE type <> "Live final";
SELECT MIN(share), MAX(share) FROM performance WHERE type != 'Live final';
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC;
SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC;
SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC LIMIT 1;
SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC LIMIT 1;
SELECT conductor.name, orchestra.orchestra FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1;
SELECT conductor.name FROM conductor, orchestra WHERE conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra_id) DESC LIMIT 1;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008;
SELECT orchestra.record_company, COUNT(orchestra.orchestra_id) FROM orchestra GROUP BY orchestra.record_company;
SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company;
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(*) DESC;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra) DESC LIMIT 1;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;
SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);
SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN ( SELECT orchestra_id FROM performance )
SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded < 2003 INTERSECT SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded > 2003;
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;
SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD';
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT DISTINCT year_of_founded FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.orchestra_id HAVING COUNT(DISTINCT performance.performance_id) > 1;
SELECT orchestra.year_of_founded FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.year_of_founded HAVING COUNT(DISTINCT performance.performance_id) > 1;
SELECT COUNT(*) FROM highschooler;
SELECT COUNT(*) FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT grade FROM highschooler;
SELECT grade FROM highschooler;
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT name FROM highschooler WHERE grade = 10;
SELECT name FROM highschooler WHERE grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle'
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) as count FROM highschooler GROUP BY grade;
SELECT grade, COUNT(*) as count FROM highschooler GROUP BY grade;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(id) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT friend.student_id, COUNT(friend.friend_id) FROM friend GROUP BY friend.student_id;
SELECT highschooler.id, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.id;
SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name;
SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1 );
SELECT highschooler.name FROM highschooler INNER JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.id HAVING COUNT(friend.friend_id) >= 3;
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 3);
SELECT highschooler.name FROM friend JOIN highschooler ON friend.friend_id = highschooler.id JOIN highschooler AS kyle ON friend.student_id = kyle.id WHERE kyle.name = "Kyle";
SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id JOIN highschooler h ON h.id = friend.student_id WHERE h.name = 'Kyle';
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT highschooler.id FROM highschooler WHERE highschooler.id NOT IN ( SELECT friend.student_id FROM friend );
SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT name FROM highschooler WHERE id NOT IN ( SELECT DISTINCT student_id FROM friend )
SELECT highschooler.id FROM highschooler INNER JOIN friend ON friend.friend_id = highschooler.id INNER JOIN likes ON likes.liked_id = highschooler.id GROUP BY highschooler.id;
SELECT friend.student_id FROM friend INNER JOIN likes ON friend.student_id = likes.student_id;
SELECT highschooler.name FROM highschooler WHERE highschooler.id IN (SELECT friend.friend_id FROM friend) AND highschooler.id IN (SELECT likes.liked_id FROM likes);
SELECT highschooler.name FROM highschooler WHERE highschooler.id IN ( SELECT friend.student_id FROM friend INTERSECT SELECT likes.student_id FROM likes )
SELECT student_id, COUNT(*) as num_likes FROM likes GROUP BY student_id;
SELECT student_id, COUNT(*) FROM likes GROUP BY student_id;
SELECT highschooler.name, COUNT(likes.student_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;
SELECT highschooler.name, COUNT(likes.student_id) AS number_of_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;
SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2 );
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2);
SELECT name FROM highschooler WHERE grade > 5 AND id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 )
SELECT highschooler.name FROM highschooler INNER JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.grade > 5 GROUP BY highschooler.name HAVING COUNT(friend.friend_id) >= 2;
SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = "Kyle");
SELECT COUNT(*) as num_likes FROM likes INNER JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle';
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT DISTINCT(student_id) FROM friend);
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT state FROM owners WHERE state IN (SELECT state FROM professionals)
SELECT DISTINCT state FROM owners WHERE state IN ( SELECT state FROM professionals )
SELECT AVG(age) AS average_age FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2);
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2 );
SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.name HAVING SUM(treatments.cost_of_treatment) <= 1000;
SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.dog_id HAVING SUM(treatments.treatment_type_code) <= 1000;
SELECT DISTINCT first_name FROM professionals UNION SELECT DISTINCT first_name FROM owners EXCEPT SELECT DISTINCT name FROM dogs;
SELECT distinct first_name FROM professionals UNION SELECT distinct first_name FROM owners EXCEPT SELECT distinct name FROM dogs;
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.professional_id IS NULL;
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN ( SELECT professional_id FROM treatments )
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;
SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2 );
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT(treatments.treatment_id) >= 2;
SELECT breeds.breed_name FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT breeds.breed_name FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) LIMIT 1;
SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT professionals.professional_id, professionals.cell_number FROM professionals WHERE professionals.professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );
SELECT professionals.professional_id, professionals.cell_number FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2;
SELECT professionals.first_name, professionals.last_name FROM professionals WHERE professionals.professional_id IN ( SELECT professional_id FROM treatments WHERE cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments ) );
SELECT professionals.first_name, professionals.last_name FROM treatments INNER JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT owners.first_name, dogs.name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE breeds.breed_name = ( SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY COUNT(*) ASC LIMIT 1 )
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.city = 'Virginia';
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';
SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id 
SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT owners.last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.age = ( SELECT MIN(age) FROM dogs );
SELECT owners.last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id ORDER BY dogs.date_of_birth ASC LIMIT 1;
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT date_arrived, date_departed FROM dogs;
SELECT dogs.date_arrived, dogs.date_departed FROM dogs;
SELECT COUNT(DISTINCT dog_id) FROM treatments;
SELECT COUNT(DISTINCT dogs.dog_id) AS num_dogs FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id;
SELECT COUNT(DISTINCT professional_id) FROM treatments;
SELECT COUNT(DISTINCT professional_id) FROM treatments;
SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%';
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs);
SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs) AND owner_id NOT IN (SELECT owner_id FROM dogs WHERE abandoned_yn = 'N');
SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1;
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1;
SELECT AVG(age) FROM dogs;
SELECT AVG(age) FROM dogs;
SELECT MAX(age) FROM dogs;
SELECT MAX(age) AS oldest_dog_age FROM dogs;
SELECT charge_type, charge_amount FROM charges;
SELECT charge_type, charge_amount FROM charges
SELECT MAX(charge_amount) AS max_charge_cost FROM charges;
SELECT MAX(charge_amount) FROM charges;
SELECT email_address, cell_number, home_phone FROM professionals;
SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals;
SELECT breed_name, size_description FROM breeds, sizes;
SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code;
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT singer.name FROM singer ORDER BY singer.net_worth_millions ASC;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT birth_year, citizenship FROM singer;
SELECT name FROM singer WHERE citizenship <> 'France';
SELECT name FROM singer WHERE citizenship != 'French';
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT DISTINCT citizenship, COUNT(singer_id) AS num_singers FROM singer GROUP BY citizenship;
SELECT citizenship, COUNT(*) as count FROM singer GROUP BY citizenship;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT song.title, singer.name FROM song INNER JOIN singer ON song.singer_id = singer.singer_id;
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
SELECT name FROM singer WHERE singer_id IN ( SELECT singer_id FROM song WHERE sales > 300000 )
SELECT name FROM singer WHERE singer_id IN ( SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1 );
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1;
SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT singer.name, SUM(song.sales) AS total_sales FROM singer INNER JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL;
SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.title IS NULL;
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT DISTINCT citizenship FROM singer WHERE birth_year > 1955;
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT DISTINCT citizenship FROM singer WHERE birth_year > 1955;
SELECT COUNT(*) FROM other_available_features;
SELECT ref_feature_types.feature_type_name FROM other_available_features JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE other_available_features.feature_name = 'AirCon';
SELECT ref_property_types.property_type_description FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE properties.property_type_code = 'code';
SELECT properties.property_name FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE ref_property_types.property_type_description IN ('Apartment', 'House') AND properties.room_count > 1;
