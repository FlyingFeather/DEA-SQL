SELECT name, country, age FROM singer ORDER BY age ASC;
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)
SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT singer.country FROM singer WHERE singer.age > 20;
SELECT singer.country, COUNT(singer.singer_id) as singer_count FROM singer GROUP BY singer.country;
SELECT country, COUNT(*) FROM singer GROUP BY country;
SELECT s.song_name FROM singer s WHERE s.age > (SELECT AVG(age) FROM singer);
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);
SELECT stadium.location, stadium.name FROM stadium WHERE stadium.capacity BETWEEN 5000 AND 10000;
SELECT stadium.location, stadium.name FROM stadium WHERE stadium.capacity BETWEEN 5000 AND 10000;
SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);
SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015;
SELECT stadium.name, stadium.capacity FROM stadium INNER JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(concert.concert_id) DESC LIMIT 1;
SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium_id IN ( SELECT concert.stadium_id FROM concert WHERE year > 2013 GROUP BY concert.stadium_id HAVING COUNT(concert.stadium_id) = ( SELECT COUNT(concert.stadium_id) FROM concert WHERE year > 2013 GROUP BY concert.stadium_id ORDER BY COUNT(concert.stadium_id) DESC LIMIT 1 ) );
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL;
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL;
SELECT DISTINCT country FROM singer WHERE age > 40 INTERSECT SELECT DISTINCT country FROM singer WHERE age < 30;
SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert WHERE year = 2014 );
SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN ( SELECT concert.stadium_id FROM concert WHERE concert.year = 2014 );
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;
SELECT singer.name, COUNT(singer_in_concert.concert_id) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;
SELECT singer.name, COUNT(concert.concert_id) AS num_of_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name;
SELECT singer.name FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014;
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014;
SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%';
SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%';
SELECT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015) GROUP BY stadium.name, stadium.location HAVING COUNT(DISTINCT concert.year) = 2;
SELECT stadium.name, stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name, stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015;
SELECT COUNT(concert.concert_id) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = (SELECT MAX(capacity) FROM stadium);
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT MIN(weight) FROM pets WHERE pettype = "dog" AND pet_age = ( SELECT MIN(pet_age) FROM pets WHERE pettype = "dog" );
SELECT MIN(weight) FROM pets WHERE pettype = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = 'dog');
SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;
SELECT COUNT(petid) FROM pets WHERE petid IN ( SELECT petid FROM has_pet WHERE stuid IN ( SELECT stuid FROM student WHERE age > 20 ) )
SELECT COUNT(pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog';
SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog';
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');
SELECT student.fname, student.lname FROM student WHERE EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = 'cat') AND EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = 'dog');
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog';
SELECT student.major, student.age FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat');
SELECT student.major, student.age FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "cat" );
SELECT student.stuid FROM student WHERE student.stuid NOT IN ( SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' );
SELECT student.stuid FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' )
SELECT student.fname, student.age FROM student WHERE EXISTS ( SELECT * FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = 'dog' ) AND NOT EXISTS ( SELECT * FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = 'cat' );
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' EXCEPT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat';
SELECT pets.pettype, pets.weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)
SELECT pets.pettype, pets.weight FROM pets WHERE pet_age = ( SELECT MIN(pet_age) FROM pets )
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3;
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "cat" AND pets.pet_age = 3;
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) AS number_of_models FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id;
SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;
SELECT model_list.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT car_makers.fullname FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.model INNER JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = 1970;
SELECT car_makers.fullname FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970;
SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = ( SELECT MIN(year) FROM cars_data )
SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id GROUP BY car_makers.maker ORDER BY MIN(cars_data.year) LIMIT 1;
SELECT DISTINCT car_names.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980;
SELECT DISTINCT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980;
SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;
SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;
SELECT car_makers.fullname, COUNT(model_list.model) AS count_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname;
SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) AS num_car_models FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.fullname;
SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.model = 'amc hornet sportabout (sw)';
SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = "france");
SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france';
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'usa';
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States';
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT countries.countryname, countries.countryid FROM countries WHERE EXISTS ( SELECT 1 FROM car_makers WHERE car_makers.country = countries.countryid );
SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 AND continents.continent = 'europe';
SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.id) >= 3 AND continents.continent = 'europe';
SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1;
SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1;
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'Volvo';
SELECT AVG(cars_data.edispl) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = 'volvo'
SELECT model, COUNT(DISTINCT model) AS versions_count FROM model_list GROUP BY model ORDER BY versions_count DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT count(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = ( SELECT id FROM car_makers WHERE fullname = "American Motor Company" );
SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE maker = 'American Motor Company');
SELECT car_makers.id, car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname HAVING COUNT(model_list.modelid) > 3;
SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.modelid) > 3;
SELECT DISTINCT model_list.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.model INNER JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "General Motors" OR cars_data.weight > 3500;
SELECT car_names.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;
SELECT cars_data.year FROM cars_data WHERE cars_data.weight BETWEEN 3000 AND 4000
SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000;
SELECT MIN(cars_data.cylinders) AS cylinders FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = 'Volvo' ORDER BY cars_data.accelerate ASC LIMIT 1;
SELECT MIN(cars_data.cylinders) FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = 'Volvo';
SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) > 2;
SELECT COUNT(DISTINCT countries.countryname) AS num_nations FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) > 2;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company';
SELECT model_list.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company';
SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN ( SELECT DISTINCT car_makers.country FROM car_makers WHERE car_makers.id IN ( SELECT DISTINCT model_list.maker FROM model_list WHERE model_list.model = 'fiat' ) GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 3 ) or countries.countryid IN ( SELECT DISTINCT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 3 );
SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN ( SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 3 ) OR countries.countryid IN ( SELECT car_makers.country FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.model WHERE car_names.make = "fiat" ) 
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT airline, abbreviation FROM airlines WHERE country = "USA";
SELECT airline, abbreviation FROM airlines WHERE country = "USA";
SELECT airports.airportcode, airports.airportname FROM airports WHERE airports.city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE city = "Anthony";
SELECT airline FROM airlines WHERE abbreviation = "UAL";
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE country = "USA";
SELECT COUNT(*) FROM airlines WHERE country = "USA";
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE airportcode = "AKO";
SELECT airportname FROM airports WHERE city = "Aberdeen";
SELECT airportname FROM airports WHERE city = "Aberdeen";
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights WHERE destairport = "ATO";
SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = "Aberdeen")
SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = "Aberdeen";
SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen') AND destairport = (SELECT airportcode FROM airports WHERE city = 'Ashley');
SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = "Aberdeen") AND destairport = (SELECT airportcode FROM airports WHERE city = "Ashley");
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'AHD';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'AHD';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'Aberdeen';
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE flights.airline = "United Airlines" AND airports.city = "Aberdeen";
SELECT airlines.airline FROM airlines WHERE EXISTS ( SELECT 1 FROM flights WHERE flights.sourceairport = 'AHD' AND flights.airline = airlines.airline );
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD';
SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.destairport = 'AHD';
SELECT airlines.airline FROM airlines JOIN flights ON airlines.abbreviation = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = "AHD";
SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'APG' AND airports.city = 'CVO';
SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode IN ('APG', 'CVO') GROUP BY airlines.airline HAVING COUNT(DISTINCT airports.airportcode) = 2;
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'CVO' AND flights.airline NOT IN ( SELECT flights.airline FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'APG' );
SELECT airlines.airline FROM airlines WHERE airlines.airline IN (SELECT flights.airline FROM flights WHERE flights.sourceairport = 'CVO') AND airlines.airline NOT IN (SELECT flights.airline FROM flights WHERE flights.sourceairport = 'APG');
SELECT flightno FROM flights WHERE airline = "United Airlines";
SELECT flightno FROM flights WHERE airline = "United Airlines";
SELECT flights.flightno FROM flights WHERE flights.sourceairport = 'APG';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE destairport = 'APG';
SELECT flights.flightno FROM flights WHERE flights.destairport = 'APG';
SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen";
SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen";
SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = "Aberdeen";
SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = "Aberdeen";
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city IN ('Aberdeen', 'Abilene'))
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights);
SELECT airportcode, airportname, city, country FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights);
SELECT name FROM employee ORDER BY age ASC;
SELECT name FROM employee ORDER BY age ASC;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT shop.location, COUNT(shop.shop_id) AS number_of_shops FROM shop GROUP BY shop.location;
SELECT shop.location, count(shop.shop_id) FROM shop GROUP BY shop.location;
SELECT shop.name, shop.district FROM shop WHERE shop.number_products = ( SELECT MAX(number_products) FROM shop )
SELECT shop.manager_name, shop.district FROM shop WHERE shop.shop_id IN (SELECT hiring.shop_id FROM hiring GROUP BY hiring.shop_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT shop_id, COUNT(*) as count FROM hiring GROUP BY shop_id)))
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC
SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop)
SELECT DISTINCT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.bonus = (SELECT MAX(bonus) FROM evaluation) LIMIT 1;
SELECT employee.name FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id ORDER BY evaluation.bonus DESC LIMIT 1;
SELECT shop.name FROM shop JOIN hiring ON hiring.shop_id = shop.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT shop.district FROM shop WHERE number_products < 3000 INTERSECT SELECT shop.district FROM shop WHERE number_products > 10000;
SELECT shop.district FROM shop WHERE shop.number_products < 3000 INTERSECT SELECT shop.district FROM shop WHERE shop.number_products > 10000;
SELECT teacher.name FROM teacher ORDER BY teacher.age ASC;
SELECT teacher.name FROM teacher ORDER BY teacher.age ASC;
SELECT teacher.name FROM teacher WHERE teacher.hometown <> "Little Lever Urban District";
SELECT teacher.name FROM teacher WHERE teacher.hometown <> "Little Lever Urban District"
SELECT teacher.name FROM teacher WHERE teacher.age = 32 OR teacher.age = 33;
SELECT name FROM teacher WHERE age = 32 OR age = 33;
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;
SELECT teacher.hometown FROM teacher ORDER BY teacher.age ASC LIMIT 1;
SELECT teacher.hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY teacher.hometown;
SELECT teacher.hometown, COUNT(*) as num_teachers FROM teacher GROUP BY teacher.hometown;
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT(DISTINCT teacher.teacher_id) >= 2;
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'Math';
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math';
SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.teacher_id IS NULL;
SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL;
SELECT COUNT(*) FROM visitor WHERE age < 30;
SELECT visitor.name FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.level_of_membership DESC;
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;
SELECT museum.open_year, museum.num_of_staff FROM museum WHERE museum.name = "Plaza Museum";
SELECT museum.name FROM museum WHERE museum.num_of_staff > ( SELECT MIN(num_of_staff) FROM museum WHERE museum.open_year > 2010 );
SELECT visitor.id, visitor.name, visitor.age FROM visitor WHERE visitor.id IN ( SELECT visit.visitor_id FROM visit GROUP BY visit.visitor_id HAVING COUNT(DISTINCT visit.museum_id) > 1 )
SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;
SELECT museum.museum_id, museum.name FROM museum JOIN visit ON museum.museum_id = visit.museum_id GROUP BY visit.museum_id, museum.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT museum.name FROM museum WHERE museum.museum_id NOT IN (SELECT museum_id FROM visit);
SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket = ( SELECT MAX(num_of_ticket) FROM visit )
SELECT SUM(visit.total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 'lv 1';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 INTERSECT SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2016;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 INTERSECT SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = "WTA Championships" INTERSECT SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = "Australian Open";
SELECT players.first_name, players.country_code FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' ) ;
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1;
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
SELECT players.first_name, players.last_name FROM players ORDER BY strftime('%Y', 'now') - strftime('%Y', players.birth_date) ASC;
SELECT players.first_name || ' ' || players.last_name AS full_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'left' ORDER BY players.birth_date ASC;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'left' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name, SUM(matches.winner_rank_points) as total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY matches.winner_id ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(matches.winner_rank_points) AS total_rank_points FROM players JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id ORDER BY total_rank_points DESC LIMIT 1;
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = "Australian Open" ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = "Australian Open" ORDER BY winner_rank_points DESC LIMIT 1;
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT matches.winner_name, matches.loser_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches) LIMIT 1;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code;
SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT players.first_name, players.last_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name, players.last_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.winner_age LIMIT 3;
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND hand = 'left';
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND hand = 'L';
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING COUNT(death.id) > 10;
SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('HMS Atalanta', 'Lettice');
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.location = 'English Channel' AND ship.id IS NULL;
SELECT departments.department_description FROM departments WHERE departments.department_name = "math";
SELECT course_description FROM courses WHERE course_name = "math";
SELECT addresses.zip_postcode FROM addresses WHERE addresses.city = 'Port Chelsea';
SELECT addresses.zip_postcode FROM addresses WHERE addresses.city = 'Port Chelsea';
SELECT students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.student_id IS NULL;
SELECT students.last_name FROM students INNER JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment);
SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';
SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered ASC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN transcripts ON student_enrolment.student_enrolment_id = transcripts.transcript_id ORDER BY transcripts.transcript_date ASC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.transcript_id ORDER BY transcripts.transcript_date ASC LIMIT 1;
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses INNER JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1;
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses WHERE addresses.address_id IN ( SELECT students.permanent_address_id FROM students GROUP BY students.permanent_address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1 ) OR addresses.address_id IN ( SELECT students.current_address_id FROM students GROUP BY students.current_address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1 );
SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE degree_programs.degree_summary_name IN ('Master', 'Bachelor') GROUP BY semesters.semester_name HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2;
SELECT semesters.semester_id FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY semesters.semester_id HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2;
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582';
SELECT students.first_name FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582';
SELECT cartoon.title FROM cartoon ORDER BY cartoon.title ASC;
SELECT cartoon.title FROM cartoon ORDER BY cartoon.title ASC;
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = "Ben Jones";
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = "Ben Jones";
SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr";
SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';
SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date;
SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date;
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT country, COUNT(id) as num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT content FROM tv_channel WHERE series_name = "Sky Radio";
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.series_name = "Sky Radio";
SELECT count(*) FROM tv_channel WHERE language = "English";
SELECT COUNT(DISTINCT language) FROM tv_channel WHERE language = 'English';
SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = 'The Rise of the Blue Beetle!';
SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.title = "The Rise of the Blue Beetle";
SELECT cartoon.title FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio";
SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';
SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime";
SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime";
SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.episode = "A Love of a Lifetime";
SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime";
SELECT tv_channel.series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_series.episode = 'A Love of a Lifetime';
SELECT series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE episode = "A Love of a Lifetime";
SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio";
SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';
SELECT cartoon.directed_by, COUNT(cartoon.id) AS num_cartoons FROM cartoon GROUP BY cartoon.directed_by;
SELECT cartoon.directed_by, COUNT(cartoon.id) as num_cartoons FROM cartoon GROUP BY cartoon.directed_by;
SELECT cartoon.production_code, cartoon.channel FROM cartoon INNER JOIN tv_series ON cartoon.channel = tv_series.channel ORDER BY tv_series.air_date DESC LIMIT 1;
SELECT cartoon.production_code, cartoon.channel FROM cartoon WHERE cartoon.id = (SELECT MAX(id) FROM cartoon)
SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1;
SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 'Y';
SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey';
SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = "Todd Casey";
SELECT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');
SELECT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.written_by = "Todd Casey" )
SELECT tv_channel.series_name, tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ("Ben Jones", "Michael Chang");
SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by LIKE '%Ben Jones%' AND cartoon.directed_by LIKE '%Michael Chang%' GROUP BY tv_channel.series_name, tv_channel.country;
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language != 'English';
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language != 'English';
SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2 )
SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.directed_by = "Ben Jones" WHERE cartoon.id IS NULL
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' )
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' )
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT DISTINCT cartoon.channel FROM cartoon WHERE cartoon.directed_by = "Ben Jones" );
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.height DESC LIMIT 1;
SELECT poker_player.money_rank FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id ORDER BY people.height DESC LIMIT 1;
SELECT AVG(poker_player.earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT people.nationality, COUNT(people.nationality) FROM people GROUP BY people.nationality;
SELECT nationality, COUNT(*) FROM people GROUP BY nationality;
SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT name FROM people WHERE nationality <> 'Russia';
SELECT people.name FROM people WHERE people.nationality != "Russia";
SELECT MAX(created) FROM votes WHERE state = 'CA';
SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');
SELECT votes.created, votes.state, votes.phone_number FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling';
SELECT area_code_state.area_code FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY area_code_state.area_code HAVING COUNT(DISTINCT contestants.contestant_name) = 2;
SELECT name FROM country WHERE indepyear > 1950;
SELECT name FROM country WHERE indepyear > 1950;
SELECT COUNT(*) FROM country WHERE governmentform = "Republic";
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';
SELECT SUM(surfacearea) AS total_surface_area FROM country WHERE region = "Caribbean";
SELECT SUM(surfacearea) FROM country WHERE continent = 'Carribean';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';
SELECT region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 'T' AND percentage > 50;
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT country.name FROM country WHERE continent = "Asia" ORDER BY lifeexpectancy LIMIT 1;
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;
SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia';
SELECT SUM(country.population), MAX(country.gnp) FROM country WHERE country.continent = 'Asia';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = "Africa" AND governmentform = "Republic";
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT SUM(surfacearea) AS total_surface_area FROM country WHERE continent IN ('Asia', 'Europe');
SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');
SELECT SUM(population) AS total_population FROM city WHERE district = 'Gelderland';
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT AVG(country.gnp), SUM(city.population) FROM country INNER JOIN city ON country.code = city.countrycode WHERE country.continent = 'North America' AND country.region = 'US Territory';
SELECT AVG(gnp) as mean_gnp, SUM(population) as total_population FROM country WHERE continent = 'US Territory';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba');
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT country.name FROM country WHERE country.code IN ( SELECT countrylanguage.countrycode FROM countrylanguage GROUP BY countrylanguage.countrycode HAVING COUNT(*) = ( SELECT MAX(language_count) FROM ( SELECT COUNT(*) as language_count FROM countrylanguage GROUP BY countrycode ) ) );
SELECT continent, COUNT(DISTINCT language) as language_count FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY language_count DESC LIMIT 1;
SELECT continent, COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'French') GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = 2;
SELECT country.name FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND country.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French');
SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" INTERSECT SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "French";
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 1 AND countrylanguage.language IN ("English", "French");
SELECT COUNT(DISTINCT country.continent) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = "Chinese";
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' )
SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'));
SELECT country.region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('Dutch', 'English');
SELECT country.name FROM country JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') AND countrylanguage.isofficial = 'T'
SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY percentage DESC LIMIT 1;
SELECT countrylanguage.language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asia' GROUP BY countrylanguage.language ORDER BY COUNT(country.code) DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform = 'Republic') GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1;
SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1;
SELECT city.name FROM city INNER JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English" AND isofficial = "T")
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = "English" AND isofficial = 1 )
SELECT SUM(country.population) FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English");
SELECT SUM(country.population) FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English");
SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 1;
SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930 AND isofficial = 'T';
SELECT country.name FROM country WHERE country.surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT code, name FROM country WHERE surfacearea > ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' )
SELECT country.name FROM country WHERE country.continent = 'Africa' AND country.population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');
SELECT country.name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');
SELECT country.name FROM country WHERE country.continent = 'Asia' AND country.population > ( SELECT MAX(population) FROM country WHERE continent = 'Africa' );
SELECT country.name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English");
SELECT country.code FROM country WHERE country.code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = "English" )
SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> "English";
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English");
SELECT country.code FROM country WHERE governmentform != 'Republic' AND country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT country.code FROM country WHERE governmentform <> "Republic" AND country.code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = "English" )
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe" AND countrylanguage.language <> "English" AND countrylanguage.isofficial = 0;
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1;
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT country.name, country.indepyear, country.surfacearea FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code ORDER BY COUNT(DISTINCT countrylanguage.language) ASC LIMIT 1;
SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = (SELECT MIN(population) FROM country);
SELECT country.population, country.name, country.headofstate FROM country ORDER BY country.surfacearea DESC LIMIT 1;
SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT DISTRICT, COUNT(*) AS number_of_cities FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY DISTRICT;
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;
SELECT country.name FROM country ORDER BY population DESC LIMIT 3;
SELECT country.name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY population LIMIT 3;
SELECT name FROM country ORDER BY population ASC LIMIT 3;
SELECT count(*) FROM country WHERE continent = "Asia";
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population = 80000;
SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population = 80000;
SELECT SUM(country.population), AVG(country.surfacearea) FROM country WHERE country.continent = "North America" AND country.surfacearea > 3000;
SELECT SUM(population), AVG(population) FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT city.name FROM city WHERE city.population > 160000 AND city.population < 900000;
SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000;
SELECT country.name, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = ( SELECT MAX(percentage) FROM countrylanguage WHERE countrylanguage.countrycode = country.code ) ORDER BY country.name;
SELECT country.code, MAX(countrylanguage.percentage) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code;
SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = "Spanish" GROUP BY language HAVING percentage = MAX(percentage);
SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = "Spanish" AND isofficial = "T" AND percentage >= 50;
SELECT countrycode FROM countrylanguage WHERE language = "Spanish" ORDER BY percentage DESC LIMIT 1;
SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.isofficial = 'T' AND countrylanguage.percentage >= 50;
SELECT name FROM conductor ORDER BY age ASC;
SELECT conductor.name FROM conductor ORDER BY conductor.age;
SELECT conductor.name FROM conductor WHERE conductor.nationality != "USA";
SELECT conductor.name FROM conductor WHERE conductor.nationality != "USA";
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT record_company FROM orchestra ORDER BY year_of_founded ASC;
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format = "CD" OR major_record_format = "DVD";
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT name FROM highschooler WHERE grade = 10;
SELECT name FROM highschooler WHERE grade = 10;
SELECT id FROM highschooler WHERE name = "Kyle";
SELECT id FROM highschooler WHERE name = "Kyle";
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) as count FROM highschooler GROUP BY grade;
SELECT grade, count(*) FROM highschooler GROUP BY grade;
SELECT grade, count(*) as count FROM highschooler GROUP BY grade ORDER BY count DESC LIMIT 1;
SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id WHERE highschooler.name = 'Kyle';
SELECT f2.name FROM highschooler h JOIN friend f1 ON f1.student_id = h.id JOIN highschooler f2 ON f2.id = f1.friend_id WHERE h.name = 'Kyle'
SELECT COUNT(f.friend_id) FROM highschooler h JOIN friend f ON h.id = f.student_id WHERE h.name = 'Kyle';
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = "Kyle");
SELECT COUNT(*) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle';
SELECT COUNT(*) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = "Kyle";
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend)
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend)
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = "Indiana" OR professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2 )
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2 );
SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment > 1000;
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;
SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2 )
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id, professionals.role_code, professionals.first_name HAVING COUNT(treatments.treatment_id) >= 2;
SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code WHERE treatments.cost_of_treatment = ( SELECT MIN(cost_of_treatment) FROM treatments ) LIMIT 1;
SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code WHERE treatments.cost_of_treatment = ( SELECT MIN(cost_of_treatment) FROM treatments )
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT professionals.first_name, professionals.last_name FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);
SELECT professionals.first_name, professionals.last_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professionals.first_name, professionals.last_name;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs)
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.date_of_birth ASC LIMIT 1;
SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT COUNT(*) FROM dogs WHERE date_of_birth > (SELECT AVG(date_of_birth) FROM dogs);
SELECT COUNT(*) FROM dogs WHERE date_of_birth > (SELECT AVG(date_of_birth) FROM dogs);
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 'Y';
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 'Y';
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT name FROM singer WHERE citizenship <> 'French';
SELECT name FROM singer WHERE citizenship != 'French';
SELECT singer.name FROM singer WHERE singer.birth_year = 1948 OR singer.birth_year = 1949;
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT DISTINCT citizenship, COUNT(*) FROM singer GROUP BY citizenship;
SELECT citizenship, count(*) as count FROM singer GROUP BY citizenship;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship, MAX(net_worth_millions) as max_net_worth FROM singer GROUP BY citizenship;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
SELECT name FROM singer WHERE singer_id IN ( SELECT singer_id FROM song WHERE sales > 300000 )
SELECT singer.citizenship FROM singer WHERE singer.birth_year < 1945 AND singer.birth_year > 1955;
SELECT singer.citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955;
SELECT properties.property_name FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE ref_property_types.property_type_description IN ('House', 'Apartment') AND properties.room_count > 1;
